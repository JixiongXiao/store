setState() 将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。
这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式

将 setState() 视为请求而不是立即更新组件的命令。为了更好的感知性能，React 会延迟调用它，
然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效

setState() 并不总是立即更新组件。它会批量推迟更新。这使得在调用 setState() 后立即读取 this.state 成为了隐患。
为了消除隐患，请使用 componentDidUpdate 或者 setState 的回调函数（setState(updater, callback)），
这两种方式都可以保证在应用更新后触发。如需基于之前的 state 来设置当前的 state，请阅读下述关于参数 updater 的内容。

除非 shouldComponentUpdate() 返回 false，否则 setState() 将始终执行重新渲染操作。如果可变对象被使用，
且无法在 shouldComponentUpdate() 中实现条件渲染，那么仅在新旧状态不一时调用 setState()可以避免不必要的重新渲染

总结：
setState其实都是同步的
setState会将对组件stage的更改放进任务队列里，更改完了之后会通知react使用新的state重新渲染组件，
但是react并不会立刻执行setState然后重新渲染组件。因为setState可能会导致DOM的重绘，从性能方面考虑，react会
批量执行setState，(比如有多次state更新，如果每更新一次就重新渲染一次，浪费性能)，
所以如果我们要保证我们要执行的代码中调用的state每一次都是最新的，
那么我们可以在setState的第二个参数里传入一个callback，这个回调函数会在setState完成后并重新
渲染组建后执行。不过官方文档建立用componentDidUpdate()的方法来代替这个方法。