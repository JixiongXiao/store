箭头函数和普通函数区别

箭头函数不会创建自己的this,所以它没有自己的this,它只会在自己作用域的上一层继承this。
所以箭头函数中的this的指向在它在定义时一家确定了，之后不会改变。
call()、apply()、bind()等方法不能改变箭头函数中的this指向。
箭头函数不能作为构造函数使用。没有自己的arguments，没有prototype

map和set的区别 https://juejin.cn/post/7064479924757168165
map的数据结构是键值对，key可以是字符串也可以是个对象
用法 map.set(key,value), map.has(key)/true-false, map.delete(key), map.delete(key), map.get(key)
set类似数组，且内部的值都是唯一的 const arr2 = [...new Set(arr)]是最快的去重方法
用法 set.add(value), set.delete(value), set.has(value)
map和set都不允许key重复，set的value就是key，value是唯一的
map是二维数组，set是一维数组

forEach和map的区别
forEach方法没有返回值，map会返回一个处理后的值的数组
如果是只是为了遍历原数组，应该使用foreach，如果是为了处理原数组，应该用map
循环打断方式是throw new Error() 但是拿不到数据，此外，循环中不可以用异步执行

typeof 和 instanceof 的区别 https://juejin.cn/post/7071401931175886878
typeof 返回一个变量的类型的字符串，instanceof返回一个布尔值
typeof 可以判断null以外的原始数据类型，但是判断引用数据类型时，除了function，其他都返回object
instanceof 可以判断各种引用类型，但是不能判断原始数据类型

typeof null 返回值是什么，为什么
Javascript 中不同对象在底层都表示为二进制，而 Javascript 中会把二进制前三位都为0的判断为 object 类型，
而 null 的二进制表示全都是0，自然前三位也是0，所以执行 typeof 时会返回 'object'。

隐式转换相关
* + 号
在字符串前加上一个+号
如果是是个数字字符串，就会变成数字
如果是个非数字字符串，就会变成NaN
new Date() 本来会得到一个时间对象，加上+号就会得到一个时间戳
如果是数字 + 字符串 就会变成字符串
* == 和 === 
=== 为全等（严格相等）操作符，用来比较两个变量的值和类型是否完全相等
== 为等于操作符，在比较中会先进行隐式类型转换，再确定操作数是否相等