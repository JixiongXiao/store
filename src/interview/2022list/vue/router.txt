router中hash模式和history模式的区别 https://juejin.cn/post/6993840419041706014

*hash模式特点:
hash模式会在url后加上#，正常情况下我们进入单应用页面时会把所有需要的页面资源
全部下载下来，后续的页面跳转就是改变#后面的地址，然后触发window.onHashChange事件进行跳转，
这个过程是纯客户端的跳转，不会再从服务端请求资源，页面所需的数据可以在生命周期中请求
*history模式特点:
history也允许开发者更改浏览器的url而不重新向服务端发送请求，只是进行客户端的页面跳转
通过history.pushstate和history.replaceState来实现
*两者的区别？为什么history模式下服务端要做适配？
在使用hash模式时虽然改变了url，但是不包含在http请求中，不会影响服务端，改变hash并没有
真正改变url，假设我们服务端配置了nginx，用户刷新页面时获得的还是相同的url，页面可以顺利刷新
如果是用户在当前用histroy模式操作切换页面的话，URL会被改变、
浏览器不会刷新页面也不会往服务端发请求，但会触发代码内的监听事件从而改变页面内容，
所以无需用到服务器也可以自由切换页面了。但是这里有个很核心的点就是URL会改变，即有新的URL诞生，
所以如果这时用户主动刷新页面（F5），浏览器发送给服务端的是新的URL，所以服务端要做适配，
配置一个合理的规则让这些URL返回的都是同一个index.html,否则会报错,
所以说history模式需要通过服务端来允许地址可访问

比如在history模式下，通过pushState在无网络请求下进行页面跳转，url会发生变化，且不请求服务端，
但是当页面刷新时，页面会用当前最新的url重新发送给服务端，服务端必须配置好，比如nginx，才能知道
当前最新的url指向的还是之前的页面