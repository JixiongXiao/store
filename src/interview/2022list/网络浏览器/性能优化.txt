从哪些点做性能优化？

1. 加载方面
    减少http请求
    减少文件大小
    CDN 第三方库，让第三方库上传大文件大图片
    SSR服务端渲染，预渲染
    懒加载
    分包 小程序 app常用

2  内存方面
3  动画和操作性能
    使用transfomr 和translate 因为脱离文档流，不会触发重排，并且CSS3属性会调用GPU渲染

    根据目前的项目去讨论
      1 使用了vue cli的官方插件 @vue/cli-plugin-babel 该插件内置了babel-loader, 自动配置了cache loader和thread-loader
      在项目前期的开发，我们就避免过多使用图片，而转用svg，目前比较流行的处理方式就是使用svg-sprite-loader来加载svg
      该解决方案会把svg全部加载，并制作成sprite也就是雪碧图，然后通过use标签去获取svg，项目前期我们没有做太多其他性能优化相关工作


    2 性能优化需要根据产品的需求和业务场景具体分析，
      以目前做的自研项目为例，作为b端产品，且使用者多为企业和部门中的安全部门和网络安全相关人员，
      他们不会频繁的关掉应用然后重新打开加载资源，应用中也不需要加载许多图片，所以图片cdn还有压缩项目大小，可以做，但是意义不大
    3 到了项目发布第一个商用版本时我们也开始考虑优化问题。并且是结合测试平时遇到的问题去思考方案，还有结合我们项目里面的一些特点，
      一个是可交互的大屏展示，如何渲染得更快，交互时卡顿更少，另一个是项目测试中很经常遇到的问题，跟网络请求相关

      先说说构建性能，优化构建性能其实也就是缓存和多核，开发环境下我们没有做太多处理，vue cli提供了很多预设，比如vue cli plugin babel,该preset已经内置了cache-loader的
      功能，会把构建缓存存放在node moudle中的.cache文件中，他会在构建时对吧文件的哈希值或者时间戳来判断文件是否有更新
      此外这个preset也有thread-loader功能，就是多线程编译，在多核机器上会自动开启

      先说所网络请求的问题，我们项目的部分数据请求接口数据量大，有些接口后端会有大量联表查询的需求，会导致请求过慢，页面可以加loading，但是
      当一个请求数据没有返回时又请求了一个数据量小的接口可能会导致数据渲染错误。当然这可以说是后端需要做的性能优化，不过我们也在思考前端如何去优化
      这一个问题，还有就是有些表单提交接口也会涉及到相同问题，导致接口请求到返回相应的时间过长，在一些特殊情况下可能用户会多次发送能改变数据库的请求
      所以我们当时从前端和后端都在考虑如果做这方面的优化。
      当时思考了一个方案，通过vuex创建一个请求任务队列，通过axios的canceltoken的方式把请求的url和关闭请求的方法一起存到队列中，
      然后再request的拦截器上做出去，在request中加入XXX操作，在response中加入XXX操作，这种方法避免了get请求导致的数据渲染错误问题
      也避免了重复发送post加大对服务端的压力。

      二是大屏相关优化
      大屏是用antvG6实现的。我们有个页面会涉及到最多500个节点，最早设计的时候UI在节点上加了多行文本和图片，我们在实现过程中发现
      G6实现他们的方式是监听节点中心点的位置，通过生成dom去追踪这个坐标。所以图片和文本都是dom元素，让页面很卡顿
      我们在后期就做了一些改动，尽量减少这些dom的生成
      大屏另一个优化的点就是布局的计算，最早我们发现我们页面有200多个节点的布局运算可能要20多秒，后来采用了G6提供的webwork计算方式
      时间压缩到7-8秒，但是webwork又带来了内网和无网络运行的问题，所以用GPU渲染方式。


      webpack的gzip压缩，使用compression-webpack-plugin插件 需要做nginx的配置
      https://zhuanlan.zhihu.com/p/81570108