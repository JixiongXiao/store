事件是什么
事件是浏览器赋予元素的默认行为，也可以理解为事件是天生具备的，无论我们是否为其绑定方法

什么是事件绑定
给元素默认的事件行为绑定方法，在行为触发的时候，执行这个方法
·DOM 0级事件绑定
 语法: [元素].on[事件] = 函数
 例子: document.body.onclick = function(){}
 移除绑定: 赋值为null或者其他非函数数值
 原理: 每一个DOM元素对象的私有属性上都有很多"onXXX"的私有属性，我们给这些事件的私有属性赋值，就是DOM0级事件绑定，
       -如果没有对应事件的私有属性值(比如DOMContentLoaded)，则无法实现事件绑定
       -只能给当前元素的某个是事件行为绑定一个方法，绑定多个方法，最后一个操作会覆盖之前的
       -执行效率快
·DOM 2级事件绑定
 语法: [元素].addEventListener([事件],[方法],[捕获/冒泡])
 例子: document.body.addEventListener('click',fn1,false)
 移除绑定: [元素].removeEventListener([事件],[方法],[捕获/冒泡]) 需要参数和绑定的时候一样
 原理: 每一个DOM元素都会基于原型链的查找机制，找到EventTarget.prototype上的addEventListener和removeEventListener，
       基于这些方法实现事件绑定和移除，DOM2级事件采用事件池机制(浏览器开辟的内存，可以存放元素名，绑定的事件，函数，传播方法)
      -DOM2事件绑定的方法一般不是匿名函数(否则无法移除事件，因为绑定和移除需要同一个参数，匿名函数没办法被引用)，目的是方便移除事件的时候使用
      -凡是浏览器提供的事件行为，都可以基于这种模式完成事件绑定和移除
      -可以给当前元素的某些事件类型，绑定多个不同的方法(进入事件池)，当事件触发，会从事件池中按照绑定顺序取出对应的方法并执行


事件对象
给当前元素的某个事件行为绑定方法，当事件行为触发，不仅会把函数执行，还会给函数默认传递一个实参，这个实参就是事件对象
事件对象会存储当前事件操作以及触发的相关信息(浏览器自己本身记录，记录的是当前本次操作的信息，和在哪个函数中无关，也就是说
当一个事件绑定了2个函数，这两个函数传递的事件对象会是同一个)

浏览器的默认行为
 ·鼠标右键菜单
 ·点击A标签实现页面跳转
 ·部分浏览器会记录输入记录，在下次输入时模糊匹配，类似搜索记录
 ·键盘按下输入内容
我们可以基于ev.preventDefault()来禁用这些默认行为，比如取消右键菜单
window.oncontextmenu = function(ev){
    ev.preventDefault();
} 

捕获/冒泡 是什么
事件触发会有三个阶段 捕获阶段，目标阶段，冒泡阶段
·阶段1 捕获阶段, 从最外层元素一直向里层逐级查找，直到找到事件源为止，目的是为了冒泡阶段的传播提供路径
       ev.path 存放的就是捕获阶段收集的传播路径
·阶段2 目标阶段，把当前事件源的相关事件行为触发
·阶段3 冒泡阶段，按照捕获阶段收集的传播路径，不仅仅当前事件源的相关事件行为被触发，而且从内到外，其祖先所有元素的相关事件
       行为也都会被触发，如果祖先级元素的相关行为绑定了方法，这些方法也会被触发

DOM 0级事件绑定中给元素事件行为绑定的方法，都是在目标阶段/冒泡阶段触发的
DOM 2级事件绑定可以控制绑定的方法在捕获阶段触发(虽然没有什么实际意义)
元素.addEventListener(事件，方法，fasle/true) 最后一个参数如果是false，在冒泡阶段触发，true在捕获阶段触发

阻止事件冒泡-兼容写法
ev.stopPropagation ? ev.stopPropagation(): ev.cancelBubble = true;
不考虑兼容一般就是
元素.onclick = function(ev){
    ev.stopPropagation();
}
addEventListener('click', function(ev){
    ev.stopPropagation();
},false)

事件委托/事件代理
·点击事存在冒泡机制，所以所有事件最终都会传播到body身上，触发body的click
·在方法的ev中，有一个属性target/srcElement(事件源)，可以知道当前操作的是那个元素，可以根据不同事件源做不同处理
·上述机制就是事件委托/事件代理，利用这个机制可以把容器A中所有子元素的某些事件行为B要触发的操作C，委托给容器A的事件B，
                         后期只要触发容器A中任何元素的行为B，都会传播到容器A上 
    -提高60%
    -可操作动态绑定元素
    -某些需求必须基于它完成

例子:把click委托给body
document.body.onclick = function(ev){
    let target = ev.target;
         targetClass =target.className;
    if(targetClass === 'inner'){
        console.log('inner');
        return
    }    
     if(targetClass === 'outer'){
        console.log('outer');
        return
    }   
     if(targetClass === 'box'){
        console.log('box');
        return
    }   


    事件函数如果想要传递事件和其他参数，事件要用$event