可以理解为在做一件事情时：“该让谁来做”。那个谁就是对象，他要怎么做是他自己的事情，最后就是一群对象合理把事情做好。
相对于面向过程的“步骤化”分析问题，面向对象则是“功能化”分析问题，其优点体现在：

1、将数据和方法封装在一起，以接口的方式提供给调用者，调用者无需关注问题的解决过程；
2、对象之间痛殴即成，减少代码的冗余，提高程序的复用性；
3、通过重载/重写方法来扩展对象的功能；
以上的优点来源于米昂想对象的三大特征：封装，继承，和多态；

封装：把客观的食物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏
继承：使用现有的类的所有功能，并在无需重新编写原来类的情况下对这些功能进行扩展
多态：一个类的实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。
以上的这些，在js的模块化进程中被体现的淋漓尽致。我当时理解面向对象的时候，就是以js的模块化历程为实例来学习理解的，很平滑。
至于其他体现，在策略模式中也有很好的体现。
参考资料：阮一峰老师2012年js模块化的博客，高程四26章

--------------------------------------------------------
开场
用生活中的例子来讲，面向对象就像是我们在使用手机，通过手机我们可以实现很多功能，但是我们不知道这些功能背后的工作原理，
这些原理都被隐藏在手机中，我们通过触碰手机，就可以使用这些功能，但是我们无需去理解它们的原理。
在编程中，面向对象就是这种思维。我们都知道JS中万物皆对象。我们在使用一些接口，一些方法，我们不知道也看不到它们的底层原理，
但是我们可以通过这些方法这些接口去实现功能。这就是JS中的面向对象的编程思想。

抛理论
面向对象这种思维的特点就是
把核心的，底层的原理抽离，把解决问题的办法展示出来，
主要是封装，继承和多态三个特点。
封装就是我们所说的，把数据和方法封装，以接口的方式留给使用者，使用者无需关注解决问题的过程
继承就是为了代码复用，在无需重新编写代码的情况下对功能复用和拓展。
至于多态是指不同对象作用于同一操作产生不同的效果，不过JS函数说是不支持多态，但是可以根据逻辑判断来执行不同的代码。

实战
据我所知，在ES6之前javascript是没有类的概念的，所以JS的程序员通过原型链和原型对象的运用来实现面向对象的编程思想。
在JS中我们可以通过new 一个构造函数来创建一个对象，这个对象就是这个构造函数的实例。在构造函数中，有一个属性叫prototype
指向了这个构造函数的原型对象。在这个原型对象中我们可以提前存放很多我们需要的方法。而所有透过这个构造函数创建的实例，都拥有
一个属性__proto__指向了这个原型对象。通过这层关联，所有的实例都可以调用到这个原型对象里面的方法。
并且，原型对象本身也是一个对象，他也是Object这个内置类的实例，因此这个原型对象内部也有一个属性__proto__指向了Object的原型对象
因此，所有通过刚才我们所说的构造函数创建出来的实例，都可以透过这个链条，直接调用Object这个内置类的原型对象里面的方法
这就是我们所说的原型链，它实现了面向对象这种编程思想。
