
虽然没有经验，但是也是想学习前端如何做优化
看过文章是说，前端性能优化一般从3个角度去思考
一是静态资源的优化，包括压缩图片，js和css文件的压缩，合并，等等，
二是页面渲染的优化，也就是比如css放在顶部渲染，js放在底部避免阻塞，减少DOM数量，img设置宽高减少重拍重绘
但是这些操作在现在优化一般也都是可以操作虚拟DOM的这些框架在做了。
三是 接口访问的优化(数据传输，缓存，DNS优化)，减少http请求啊，比如资源合并，雪碧图，字体图标少用图片，

所以我和结合我的经理讲，但是不确定这是不是优化，因为我经验有限

首先是静态资源优化

就是压缩图片尺寸，有一个库叫 sharp-cli，然后用npx expo-optimize就可以压缩图片大小但是不影响图片的质量
这样载入的事件也会更短，app更小。

就是我之前在做一个作业的时候用了css sprite。国内好像直接翻译成雪碧图，
就是把网站上的一些图片全部放在一张图上，这样可以减少http请求的次数。因为我个人做过平面，PS用过很多年，所以这个方法对我来讲特别上手

页面渲染···我觉得现在如果我们用的都是操作虚拟dom的框架，那其实应该这方面的优化都是框架在做吧，如果我理解得不对请指出来

再者就是接口访问的优化，我确实这方面经验不多，希望以后可以学习

还有再围绕我们这个app讲
首先标签语义化算是一种优化吧，react native中，view标签就是div，没有太多html的语义化标签
所以我刚开始做app的时候，几乎把所有的东西都封装成组件，然后用响应的语义化的名字去明明这些组件
打一个比方，在RN中你想要创建一块可以点击的区域，标签名是TouchableOpacity
制作icon和按钮都用了这个标签，所以封装成了组件，预设样式和其他属性，用参数可以改变。
整个页面的结构是很清晰的。



如果觉得有什么是我可以学习的方向也请告诉我。

https://www.open-open.com/lib/view/open1477555102560.html

!利用数据缓存机制
对于不经常更新的数据可以采用数据缓存，
如果用vue和react呢，可以把一些不经常更新的数据存储在vuex和redux中，这种情况下当页面刷新我们会从服务器拉取最新数据，
不刷新的话只需要从vuex和redux中获取就可以，
像有些数据如果是刷新页面依然可以保存的，就用sessionstorage，这样只有关掉页面这些数据才会清楚

还有一部分也可以用localstorage来储存。这样即使关闭页面，数据依然保存。通过不同的缓存策略，也可以尽可能地减少向服务器发送请求

！减少数据传输大小
内容，资源，数据压制
大批量数据分批次请求，比如下拉刷新

！减少http请求次数
资源合并
字体图标少用图片，
雪碧图

！DNS优化 分服务器部署(CDN)

！网络层优化
图片懒加载

用户体验，交互上地优化
loading页面，尽量减少白屏时间
还有就是骨架屏，当数据还没有请求下来的时候用一些灰色的框框取代，用户可以看到结构

使用HTTP2

https://segmentfault.com/a/1190000022205291