个人笔记：
单例模式singleton pattern的出现主要是为了满足早期模块化编程的需求，在早期我们还没有commonjs和ES6的import和export的管理方式下
我们需要有一种方法来管理不同的模块，就是单例模式。
假设我们一个项目下有三个板块，一个公共板块，用来存放公共的方法，然后一个板块A一个板块B用来存放不同的需求
比如说公共版块里用来存放公共方法，比如防抖节流，比如深拷贝的方法，
每一格板块都可以是一个自执行函数，我们可以直接在板块内部暴露这些方法，比如windown.debounce= function debounce(){}，
这种方法在全局的范围下包括板块A和板块B的内部都可以使用这个防抖的方法。
我们也可以在公共板块内部return一个内存空间，其实就是一个对象，来储存内部创建的所有方法 return{debounce:debounce}
然后再板块外部声明一个变量utils来存放这个内存空间。以后想要使用debounce的方法就可以用utils.debounce。
这种方法就是最早期的模块化编程思想，它可以避免全局变量的污染的情况下实现不同模块之间方法的调用。
而且从单例模式的设计思想下还衍生出了另一种管控方法的模式叫command pattern命令模式(在底部)


  Singleton单例模式 && Command命令模式 
 *     + 最早期的模块化编程思想「同样的还有：AMD/CMD/CommonJS/ES6Module」
 *     + 避免全局变量的污染
 *     + 实现模块之间的相互调用「提供了模块导出的方案」
 *     + 在实际的业务开发中，我们还可以基于命令模式管控方法的执行顺序，从而有效的实现出对应的功能


 // 公用版块 utils
let utils = (function () {
    function debounce(func, wait) {}
    //...

    return {
        debounce: debounce
    };
})();

// A版块
let AModule = (function () {
    utils.debounce();

    function fn() {}

    function query() {}

    return {
        query: query
    };
})();

个人笔记：
什么是命令模式。命令模式是在单例模式的思想下设计出来用来管理方法执行顺序的模式
它的设计理念和单例模式一样。我们在自执行函数内可以写下我们需要的业务逻辑的函数
比如获取数据，绑定数据，根据数据执行某个方法。在单例模式中，我们返回的对象内
存放了不同的元素指向内部的方法。而在命令模式中我们返回一个函数，代表着需求A，A内部按顺序去执行
我们刚才写的方法。比如先执行获取数据，然后绑定，最后处理。我们在这个模块内return的这个对象
就像这个模块的大脑，管控了模块中方法的执行顺序。我们在外部一样也会声明一个变量来储存这个模块。
假设变量名是B，那我们只需要B.A()就可以执行我们的需求。

// B版块{实现当前模块下需要完成的所有的功能}
let BModule = (function () {
    utils.debounce();
    AModule.query();

    // 获取数据
    function getData() {}

    // 绑定数据
    function binding() {}

    // 处理事件绑定
    function handle() {}

    // 处理其它事情的
    function fn() {}

    return {
        // 模块的入口「相当于模块的大脑，控制模块中方法的执行顺序」
        init() {
            getData();
            binding();
            handle();
            fn();
        }
    };
})();
BModule.init(); 
*/